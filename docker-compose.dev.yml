version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: yourjob-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpass}
      MYSQL_DATABASE: ${DB_NAME:-yourjobdb}
      MYSQL_USER: ${DB_USER:-urjob}
      MYSQL_PASSWORD: ${DB_PASSWORD:-rootpass}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - yourjob-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: yourjob-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - yourjob-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: yourjob-backend
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      # Database configuration
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-3306}
      DB_NAME: ${DB_NAME:-yourjobdb}
      DB_USER: ${DB_USER:-urjob}
      DB_PASSWORD: ${DB_PASSWORD:-rootpass}
      
      # Redis configuration
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispass}
      
      # JWT configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      
      # Application settings
      APP_ENV: ${APP_ENV:-development}
      APP_DEBUG: ${APP_DEBUG:-true}
      API_RATE_LIMIT: ${API_RATE_LIMIT:-1000}
      
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    networks:
      - yourjob-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BFF (Backend for Frontend)
  bff:
    build:
      context: ./bff
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: yourjob-bff
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      BACKEND_URL: ${BACKEND_URL:-http://backend:8082}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      API_RATE_LIMIT: ${API_RATE_LIMIT:-1000}
    networks:
      - yourjob-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
      args:
        - REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}
        - REACT_APP_BFF_BASE_URL=${REACT_APP_BFF_BASE_URL}
    container_name: yourjob-frontend
    restart: unless-stopped
    depends_on:
      - bff
    ports:
      - "3000:3000"
    networks:
      - yourjob-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
  redis_data:
  app_uploads:
  app_logs:

networks:
  yourjob-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16