# Development-optimized Docker Compose
# 로컬 개발용 경량화된 설정

version: '3.8'

services:
  # MySQL Database (필수)
  db:
    image: mysql:8.0
    container_name: yourjob-mysql-dev
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword123}
      MYSQL_DATABASE: ${DB_NAME:-yourjobdb}
      MYSQL_USER: ${DB_USER:-urjob}
      MYSQL_PASSWORD: ${DB_PASSWORD:-localpassword123}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "3306:3306"
    networks:
      - yourjob-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis for caching (필수)
  redis:
    image: redis:7-alpine
    container_name: yourjob-redis-dev
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispassword123}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - yourjob-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: yourjob-backend-dev
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8082:8082" # Backend HTTP
      - "5006:5005" # Remote Debug
    environment:
      SPRING_PROFILES_ACTIVE: local
      DB_HOST: ${DB_HOST:-db}
      DB_PORT: ${DB_PORT:-3306}
      DB_NAME: ${DB_NAME:-yourjobdb}
      DB_USER: ${DB_USER:-urjob}
      DB_PASSWORD: ${DB_PASSWORD:-localpassword123}
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispassword123}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-for-local-development-32-chars-long}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      APP_ENV: development
      APP_DEBUG: true
    volumes:
      - app_logs:/app/logs
    networks:
      - yourjob-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # BFF service
  bff:
    build:
      context: ./bff
      dockerfile: Dockerfile
      target: development
    container_name: yourjob-bff-dev
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    ports:
      - "8081:8081"
      - "5007:5005" # Remote Debug
    environment:
      SPRING_PROFILES_ACTIVE: local
      BACKEND_URL: ${BACKEND_URL:-http://backend:8082}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-for-local-development-32-chars-long}
      API_RATE_LIMIT: ${API_RATE_LIMIT:-1000}
    networks:
      - yourjob-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: yourjob-frontend-dev
    restart: unless-stopped
    depends_on:
      - bff
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_BASE_URL: ${REACT_APP_API_BASE_URL:-http://localhost:8082}
      REACT_APP_BFF_BASE_URL: ${REACT_APP_BFF_BASE_URL:-http://localhost:8081}
      NODE_ENV: development
    volumes:
      - ./frontend/src:/app/src:ro
    networks:
      - yourjob-network

  # Nginx (간단한 프록시)
  nginx:
    image: nginx:alpine
    container_name: yourjob-nginx-dev
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
      - bff
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - yourjob-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana 모니터링 (선택사항)
  grafana:
    image: grafana/grafana:latest
    container_name: yourjob-grafana-dev
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - yourjob-network

volumes:
  mysql_data:
  redis_data:
  app_logs:
  grafana_data:

networks:
  yourjob-network:
    driver: bridge