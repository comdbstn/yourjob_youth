<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yourjob.backend.mapper.CommunityMapper">
    <select id="selectPostList" parameterType="map" resultType="com.yourjob.backend.entity.CommunityPostListItem">
        select
        post_id as id,
        category_id as categoryId,
        user_id as userId,
        (SELECT company_name FROM users WHERE b.user_id = user_id) AS companyName,
        title as title,
        type as subTitle,
        #type as type,
        writer as writer,
        content as content,
        views as views,
        #likes as likes,
        (SELECT COUNT(*) FROM
        community_post_recommend a where a.post_id = b.post_id) AS likes,
        (SELECT COUNT(*) FROM
        community_comments a WHERE a.post_id = b.post_id) AS commentCount,
        created_at as date
        from community_posts b
        where 1 = 1
        <if test='type != null and type != ""'>
            and type = #{type}
        </if>
        <if test='categoryId != null and categoryId != 99'>
            and category_id = #{categoryId}
        </if>
        <if test='query != null and query != ""'>
            and ${searchType} like CONCAT('%',#{query},'%')
        </if>
        order by created_at desc
        limit #{offSetNumb}, #{size}
    </select>
    <select id="selectPostListBest" parameterType="map" resultType="com.yourjob.backend.entity.CommunityPostListItem">
        select
        post_id as id,
        category_id as categoryId,
        user_id as userId,
        (SELECT company_name FROM users WHERE b.user_id = user_id) AS companyName,
        title as title,
        type as subTitle,
        #type as type,
        writer as writer,
        content as content,
        views as views,
        #likes as likes,
        (SELECT COUNT(*) FROM
        community_post_recommend a where a.post_id = b.post_id) AS likes,
        (SELECT COUNT(*) FROM
        community_comments a WHERE a.post_id = b.post_id) AS commentCount,
        created_at as date
        from community_posts b
        where 1 = 1
        <if test='type != null and type != ""'>
            and type = #{type}
        </if>
        <if test='categoryId != null and categoryId != 99'>
            and category_id = #{categoryId}
        </if>
        <if test='query != null and query != ""'>
            and ${searchType} like CONCAT('%',#{query},'%')
        </if>
        order by likes desc, created_at desc
        limit #{offSetNumb}, #{size}
    </select>
    <select id="selectPostCnt" parameterType="map" resultType="int">
        select count(*) as cnt
        from community_posts
        where 1 = 1
        <if test='type != null and type != ""'>
            and type = #{type}
        </if>
        <if test='categoryId != null and categoryId != 99'>
            and category_id = #{categoryId}
        </if>
        <if test='query != null and query != ""'>
            and ${searchType} like CONCAT('%',#{query},'%')
        </if>
        order by created_at desc
    </select>
    <select id="communityCategoryIdx" parameterType="String" resultType="int">
        select category_id from community_categories where name = #{category_name}
    </select>
    <insert id="insertPost" parameterType="map" useGeneratedKeys="true" keyProperty="id">
        insert into community_posts
        (user_id,
         category_id,
         type,
         title,
         writer,
         content)
        VALUES (
                   #{userid},
                   #{categoryid},
                   #{type},
                   #{title},
                   #{writer},
                   #{content})
    </insert>
    <update id="editPost" parameterType="map">
        update community_posts set
                                   title = #{title},
                                   content = #{content},
                                   updated_at = NOW()
        where post_id = #{postid}
    </update>
    <delete id="deletePost" parameterType="int">
        delete from community_posts where post_id = #{id}
    </delete>
    <select id="selectPostDetail" parameterType="int" resultType="com.yourjob.backend.entity.CommunityPostDetail">
        select
            post_id as id,
            user_id as userId,
            title as subTitle,
            title as title,
            writer as writer,
            content as content,
            views as views,
            del_yn as delYn,
            #likes as likes,
            (SELECT COUNT(*) FROM
                community_post_recommend a where a.post_id = b.post_id) AS likes,
            created_at as date
        from community_posts b where post_id = #{id}
    </select>
    <select id="selectPostDetailMento" parameterType="int" resultType="com.yourjob.backend.entity.CommunityPostDetail">
        select
            post_id as id,
            user_id as userId,
            title as subTitle,
            title as title,
            writer as writer,
            content as content,
            views as views,
            del_yn as delYn,
            #likes as likes,
            (SELECT company_name FROM users WHERE b.user_id = user_id) AS companyName,
            (SELECT COUNT(*) FROM
                community_post_recommend a where a.post_id = b.post_id) AS likes,
            created_at as date
        from community_posts b where post_id = #{id}
    </select>

    <update id="updatePostView" parameterType="int">
        update community_posts set
            views = views + 1
        where post_id = #{id}
    </update>
    <select id="selectCommunityComments" parameterType="int" resultType="com.yourjob.backend.entity.CommunityComment">
        select
        c.comment_id   as id,
        c.post_id      as postId,
        c.user_id      as userId,
        c.writer       as writer,
        c.content      as content,
        c.recomment_id as recommentId,
        c.del_yn       as delYn,
        (SELECT COUNT(*) FROM community_comment_recommends r WHERE r.comment_id = c.comment_id) AS likes,
        c.created_at   as date
        from community_comments c
        where c.post_id = #{id}
        order by
        CASE
        WHEN c.recomment_id IS NULL THEN c.created_at
        ELSE (SELECT created_at FROM community_comments WHERE comment_id = c.recomment_id)
        END ASC,   <!-- DESC → ASC 로 변경 -->
        c.created_at ASC
    </select>
    <select id="selectCommunityCommentsBlock" parameterType="int" resultType="com.yourjob.backend.entity.CommunityCommentBlock">
        select
            block_id as id,
            user_id as userId,
            post_id as postId,
            comment_id as commentId,
            comment_user_id as cmmntUserId
        from community_comments_block
        where 1 = 1
          and user_id = #{id}
        GROUP BY cmmntUserId
    </select>
    <select id="selectCommunityCommentDetail" parameterType="int" resultType="com.yourjob.backend.entity.CommunityComment">
        select
            c.comment_id as id,
            c.post_id AS postId,
            c.user_id AS userId,
            c.writer as writer,
            c.content as content,
            c.recomment_id as recommentId,
            (SELECT COUNT(*) FROM community_comment_recommends r where r.comment_id = c.comment_id) AS likes,
            c.del_yn as delYn,
            c.created_at as date
        from community_comments c
        where 1 = 1
          and c.comment_id = #{id}
            #and c.del_yn = 'n'
    </select>
    <insert id="insertCommunityComment" parameterType="com.yourjob.backend.entity.CommunityComment" useGeneratedKeys="true" keyProperty="id">
        insert into community_comments
        (post_id,
         user_id,
         writer,
         content,
         recomment_id)
        VALUES (
                   #{postId},
                   #{userId},
                   #{writer},
                   #{content},
                   #{recommentId})
    </insert>
    <insert id="insertCommunityCommentReport" parameterType="com.yourjob.backend.entity.CommunityCommentReport" useGeneratedKeys="true" keyProperty="id">
        insert into community_comments_report
        (report_id,
         user_id,
         post_id,
         comment_id)
        VALUES (
                   #{id},
                   #{userId},
                   #{postId},
                   #{commentId})
    </insert>
    <insert id="insertCommunityCommentBlock" parameterType="com.yourjob.backend.entity.CommunityCommentBlock" useGeneratedKeys="true" keyProperty="id">
        insert into community_comments_block
        (block_id,
         user_id,
         post_id,
         comment_id,
         comment_user_id)
        VALUES (
                   #{id},
                   #{userId},
                   #{postId},
                   #{commentId},
                   #{cmmntUserId})
    </insert>
    <update id="updateCommunityComment" parameterType="com.yourjob.backend.entity.CommunityComment">
        update community_comments set
                                      content = #{content},
                                      updated_at = NOW()
        where comment_id = #{id} and del_yn = 'n'
    </update>
    <update id="deleteCommunityComment" parameterType="com.yourjob.backend.entity.CommunityComment">
        update community_comments set
                                      del_yn = 'y',
                                      updated_at = NOW()
        where comment_id = #{id}
    </update>
    <insert id="insertCommunityRecommend" parameterType="com.yourjob.backend.entity.CommunityComment" useGeneratedKeys="true" keyProperty="id">
        insert into community_post_recommend
        (user_id,
         post_id)
        VALUES (
                   #{userId},
                   #{postId})
    </insert>
    <insert id="insertCommunityCommentRecommend" parameterType="java.util.Map">
        INSERT INTO community_comment_recommends (user_id, comment_id)
        VALUES (#{userId}, #{commentId})
    </insert>
    <!-- 댓글 신고 목록 조회 -->
    <select id="selectCommentReports" parameterType="map" resultType="com.yourjob.backend.entity.CommentReportItem">
        SELECT
        r.report_id AS reportId,
        r.user_id AS reportUserId,
        r.post_id AS postId,
        r.comment_id AS commentId,
        r.created_at AS createdAt,
        r.isCleared AS isCleared,
        p.title AS postTitle,
        p.type AS postType,
        c.content AS commentContent,
        c.created_at AS commentCreatedAt,
        reporter.account_id AS reporterAccountId,
        commentWriter.account_id AS commentWriterAccountId
        FROM
        community_comments_report r
        JOIN
        community_posts p ON r.post_id = p.post_id
        JOIN
        community_comments c ON r.comment_id = c.comment_id
        JOIN
        users reporter ON r.user_id = reporter.user_id
        JOIN
        users commentWriter ON c.user_id = commentWriter.user_id
        WHERE 1=1
        <if test='keyword != null and keyword != ""'>
            AND (p.title LIKE CONCAT('%', #{keyword}, '%') OR c.content LIKE CONCAT('%', #{keyword}, '%'))
        </if>
        <if test='status != null and status != ""'>
            AND r.isCleared = #{status}
        </if>
        ORDER BY r.created_at DESC
        LIMIT #{offset}, #{size}
    </select>


    <!-- 댓글 신고 개수 조회 -->
    <select id="selectCommentReportsCount" parameterType="map" resultType="int">
        SELECT
        COUNT(*)
        FROM
        community_comments_report r
        JOIN
        community_posts p ON r.post_id = p.post_id
        JOIN
        community_comments c ON r.comment_id = c.comment_id
        WHERE 1=1
        <if test='keyword != null and keyword != ""'>
            AND (p.title LIKE CONCAT('%', #{keyword}, '%') OR c.content LIKE CONCAT('%', #{keyword}, '%'))
        </if>
        <if test='status != null and status != ""'>
            AND r.isCleared = #{status}
        </if>
    </select>

    <update id="completeCommentReport" parameterType="int">
        UPDATE community_comments_report SET isCleared = 'TRUE' WHERE report_id = #{reportId}
    </update>

    <!-- 댓글 신고 삭제 -->
    <delete id="deleteCommentReport" parameterType="int">
        DELETE FROM community_comments_report WHERE report_id = #{reportId}
    </delete>

    <!-- 댓글 신고 일괄 삭제 -->
    <delete id="bulkDeleteCommentReports" parameterType="java.util.List">
        DELETE FROM community_comments_report WHERE report_id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>
    <!-- 게시물 추천 여부 확인 -->
    <select id="checkPostRecommend" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM community_post_recommend
        WHERE user_id = #{userId} AND post_id = #{postId}
    </select>

    <!-- 댓글 추천 여부 확인 -->
    <select id="checkCommentRecommend" parameterType="map" resultType="int">
        SELECT COUNT(*)
        FROM community_comment_recommends
        WHERE user_id = #{userId} AND comment_id = #{commentId}
    </select>

    <!-- 게시물 추천 취소 -->
    <delete id="deletePostRecommend" parameterType="map">
        DELETE FROM community_post_recommend
        WHERE user_id = #{userId} AND post_id = #{postId}
    </delete>

    <!-- 댓글 추천 취소 -->
    <delete id="deleteCommentRecommend" parameterType="map">
        DELETE FROM community_comment_recommends
        WHERE user_id = #{userId} AND comment_id = #{commentId}
    </delete>
</mapper>